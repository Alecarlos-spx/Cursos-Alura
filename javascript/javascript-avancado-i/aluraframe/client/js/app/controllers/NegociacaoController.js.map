{"version":3,"sources":["../../app-es6/controllers/NegociacaoController.js"],"names":["ListaNegociacoes","Mensagem","NegociacoesView","MensagemView","NegociacaoService","DateHelper","Bind","Negociacao","NegociacaoController","_ordemAtual","$","document","querySelector","bind","_inputData","_inputQuantidade","_inputValor","_negociacoesView","_listaNegociacoes","_mensagemView","_mensagem","_service","_init","lista","then","negociacoes","forEach","adiciona","negociacao","catch","console","log","erro","texto","setInterval","importaNegociacoes","event","preventDefault","_criaNegociacao","cadastra","mensagem","_limpaFormulario","importa","apaga","esvazia","textoParaData","value","parseInt","parseFloat","focus","coluna","inverteOrdem","ordena","a","b","negociacaoController","currentInstance"],"mappings":"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","file":"NegociacaoController.js","sourcesContent":["import {ListaNegociacoes} from '../models/ListaNegociacoes';\r\nimport {Mensagem} from '../models/Mensagem';\r\nimport {NegociacoesView} from '../views/NegociacoesView';\r\nimport {MensagemView} from '../views/MensagemView';\r\nimport {NegociacaoService} from '../services/NegociacaoService';\r\nimport {DateHelper} from '../helpers/DateHelper';\r\nimport {Bind} from '../helpers/Bind';\r\nimport {Negociacao} from '../models/Negociacao';\r\n\r\nclass NegociacaoController {\r\n\r\n    constructor() {\r\n        this._ordemAtual = ''; // quando a página for carregada, não tem critério. Só passa a ter quando ele começa a clicar nas colunas\r\n        let $ = document.querySelector.bind(document); //criando um alias para o metodo querySelector, como ele é associado ao document, para não perder essa associação utilizamos a função bind para indicar e não perder a ligação.\r\n            //o $ é muito utilizado no framework jQuery\r\n            //a função bind, presente em todas as funções, permite indicar qual será o valor de this quando ela for executada\r\n\r\n        this._inputData =        $('#data');\r\n        this._inputQuantidade =  $('#quantidade');\r\n        this._inputValor =       $('#valor');\r\n\r\n        this._negociacoesView = new NegociacoesView($('#negociacoesView'));\r\n\r\n\r\n        this._listaNegociacoes = new Bind(\r\n            new ListaNegociacoes(),\r\n            new NegociacoesView($('#negociacoesView')),\r\n            'adiciona', 'esvazia', 'ordena', 'inverteOrdem');\r\n\r\n        /*this._listaNegociacoes = new Bind(\r\n            new ListaNegociacoes(),\r\n            this._negociacoesView,\r\n            'adiciona', 'esvazia', 'ordena');*/\r\n\r\n        /*this._listaNegociacoes = ProxyFactory.create(\r\n            new ListaNegociacoes(),\r\n            ['adiciona', 'esvazia'], (model) => this._negociacoesView.update(model));\r\n            */\r\n        /* this._listaNegociacoes = new ListaNegociacoes(this, function(model){\r\n            this._negociacoesView.update(model);\r\n        });\r\n        */\r\n\r\n        /* this._listaNegociacoes = new ListaNegociacoes(model => this._negociacoesView.update(model));*/\r\n\r\n        //o escopo do this de um arrow functio é lexico, ele não é dinamico igual o escopo de uma function, ele não se modifica de acordo com o contexto\r\n        //independente de onde for chamada a função unificada a criação do objeto _ListaNegociação, ele será executado baseado no this do local da sua criação.\r\n        \r\n        //this._negociacoesView.update(this._listaNegociacoes);\r\n\r\n        this._mensagemView = new MensagemView($('#mensagemView'));\r\n        \r\n        this._mensagem = new Bind(new Mensagem(), this._mensagemView, 'texto');\r\n        \r\n        /*this._mensagem = ProxyFactory.create(\r\n            new Mensagem(), \r\n            ['texto'], model => this._mensagemView.update(model));\r\n            */\r\n\r\n\r\n        //this._mensagem = new Mensagem();\r\n        //this._mensagemView.update(this._mensagem);\r\n\r\n        /*ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => {\r\n                \r\n                new NegociacaoDao(connection)\r\n                .listatodos()\r\n                .then(negociacoes => {\r\n                    negociacoes.forEach(negociacao => {\r\n                    this._listaNegociacoes.adiciona(negociacao);\r\n                    });\r\n                });\r\n            });*/\r\n\r\n            this._service = new NegociacaoService();\r\n\r\n            this._init();\r\n\r\n    }\r\n        \r\n    _init(){\r\n            \r\n        this._service\r\n                .lista()\r\n                .then(negociacoes =>\r\n                    negociacoes.forEach(negociacao =>\r\n                        this._listaNegociacoes.adiciona(negociacao)))\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    this._mensagem.texto = erro;\r\n                });\r\n\r\n\r\n\r\n            /*\r\n            ConnectionFactory\r\n                .getConnection()\r\n                .then(connection => new NegociacaoDao(connection))\r\n                .then(dao => dao.listatodos())\r\n                .then(negociacoes => \r\n                        negociacoes.forEach(negociacao => \r\n                        this._listaNegociacoes.adiciona(negociacao)))\r\n                .catch(erro => {\r\n                    console.log(erro);\r\n                    this._mensagem.texto = error;\r\n                });\r\n            */\r\n\r\n            setInterval(() => {\r\n                this.importaNegociacoes();\r\n            }, 3000);\r\n    }\r\n\r\n    adiciona(event){\r\n\r\n        event.preventDefault();\r\n\r\n        let negociacao = this._criaNegociacao();\r\n\r\n        this._service\r\n            .cadastra(negociacao)\r\n            .then(mensagem => {\r\n                this._listaNegociacoes.adiciona(negociacao);\r\n                this._mensagem.texto = mensagem;\r\n                this._limpaFormulario();\r\n            }). catch(erro => this._mensagem.texto = erro);\r\n\r\n        // adicionar a negociação através do DAO.\r\n\r\n        /*ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => {\r\n\r\n                let negociacao = this._criaNegociacao();\r\n\r\n                new NegociacaoDao(connection)\r\n                    .adiciona(negociacao)\r\n                    .then(() => {\r\n                        this._listaNegociacoes.adiciona(negociacao);\r\n                        this._mensagem.texto = 'Negociação adicionada com sucesso';\r\n                        this._limpaFormulario();\r\n                    })\r\n            }).catch(erro => this._mensagem.texto = erro);\r\n            */\r\n\r\n        \r\n        // adicionar a negociação em uma lista\r\n\r\n        /*\r\n        try{\r\n\r\n            this._listaNegociacoes.adiciona(this._criaNegociacao());\r\n\r\n            this._negociacoesView.update(this._listaNegociacoes); \r\n\r\n            this._mensagem.texto = 'Negociação adicionada com Sucesso!';\r\n            //this._mensagemView.update(this._mensagem);\r\n            this._limpaFormulario();\r\n        }catch(erro){\r\n            this._mensagem.texto = erro;\r\n        }\r\n        */\r\n\r\n\r\n\r\n        //console.log(typeof(this._inputData.value));\r\n\r\n        //let data = new Date(this._inputData.value.split('-')); //pega a data e divide com o split, em dia, mês e ano, transformando em um array\r\n        // ['2016','11','12'].join(',') junta todo o array em uma strig, dividida por \",\"\r\n        //date tambem aceita array de inteiros\r\n\r\n        //let data = new Date(this._inputData.value.replace(/-/g, ',')); // faz a troca do - por ,  utilizando uma exp regular e o replace - paramentro g = global\r\n\r\n        //  o construtor da data conta os meses a partir de 0 (janeiro), (1) fevereiro e etc\r\n        // let data = new Date(...\r\n        //     this._inputData.value\r\n        //         .split('-') //transforma em array cada item procurando pelo -\r\n        //         .map(function(item, indice){\r\n        //             if(indice == 1) {\r\n        //                 return item - 1;    //quando encontrar o item na segunda posição faz a subtração de 1 da data para corrigir o mês\r\n        //             }\r\n        //                 return item;\r\n        //         })\r\n        //     );\r\n\r\n        // este codigo substitui o acima, diminuindo assim a verbosidade com as mesmas funcionalidades.\r\n            // let data = new Date(... //spread operator\r\n            //     this._inputData.value\r\n            //         .split('-')\r\n            //         .map((item, indice) => item - indice % 2)        //foi criada o arrow function =>\r\n                                                            //quando o bloco de comando tem apenas uma instrução pode ser retirado as {}\r\n                                                            // o return foi retirado porque a função entende que tem que ser retornado o resultado do calculo                                                \r\n            //);\r\n\r\n            //console.log(data);\r\n        //let helper = new DAteHelper();\r\n        //let data = DateHelper.textoParaData(this._inputData.value);\r\n        //foi retirado porque na classe DateHelper foi definida como staticos seus metodos e assim não é necessário instancia-la, pode ser acessada diretamente\r\n\r\n\r\n        // let negociacao = new Negociacao(\r\n        //     DateHelper.textoParaData(this._inputData.value),\r\n        //     this._inputQuantidade.value,\r\n        //     this._inputValor.value,\r\n        //     this._listaNegociacoes = new ListaNegociacoes()\r\n        // );\r\n\r\n        //console.log(negociacao);\r\n\r\n        //console.log(DateHelper.dataParaTexto(negociacao.data));        \r\n    }\r\n\r\n    importaNegociacoes(){\r\n        \r\n        this._service\r\n            .importa(this._listaNegociacoes.negociacoes)\r\n            .then(negociacoes => negociacoes.forEach(negociacao => {\r\n                this._listaNegociacoes.adiciona(negociacao);\r\n                this._mensagem.texto = 'Negociações do período importadas'\r\n            }))\r\n            .catch(erro => this._mensagem.texto = erro);\r\n\r\n\r\n\r\n        /*this._service\r\n        .obterNegociacoes()\r\n        .then(negociacoes => \r\n            negociacoes.filter(negociacao =>\r\n                !this._listaNegociacoes.negociacoes.some(negociacaoExistente =>\r\n                    JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\r\n        )\r\n        .then(negociacoes => negociacoes.forEach(negociacao => {\r\n           this._listaNegociacoes.adiciona(negociacao);\r\n           this._mensagem.texto = 'Negociações do período importadas'\r\n        })).catch(error => this._mensagem.texto = error);  \r\n        */\r\n        \r\n        /*\r\n        service\r\n        .obterNegociacoes()\r\n        .then(negociacoes => {\r\n          negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\r\n          this._mensagem.texto = 'Negociações do período importadas com sucesso';\r\n        })\r\n        .catch(error => this._mensagem.texto = error);  \r\n        */\r\n\r\n\r\n\r\n        /*let service = new NegociacaoService();\r\n        \r\n        Promise.all([\r\n            service.obterNegociacoesDaSemana(),\r\n            service.obterNegociacoesDaSemanaAnterior(),\r\n            service.obterNegociacoesDaSemanaRetrasada()]\r\n            ).then(negociacoes => {\r\n                negociacoes\r\n                .reduce((arrayAchatado, array) => arrayAchatado.concat(array), [])\r\n                .forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\r\n                this._mensagem.texto = 'Negociações importadas com sucesso!';\r\n            })\r\n            .catch(error => this._mensagem.texto = error);\r\n            */\r\n        /*\r\n        let promise = service.obterNegociacoesDaSemana();\r\n        promise\r\n            .then(negociacoes => {\r\n                negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\r\n                this._mensagem.texto = 'Negociações da semana obtida com sucesso';\r\n            })\r\n            .catch(erro => this._mensagem.texto = erro);\r\n\r\n        let promise = service.obterNegociacoesDaSemanaAnterior();\r\n        promise\r\n            .then(negociacoes => {\r\n                negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\r\n                this._mensagem.texto = 'Negociações da semana obtida com sucesso';\r\n            })\r\n            .catch(erro => this._mensagem.texto = erro);\r\n\r\n        let promise = service.obterNegociacoesDaSemanaRetrasada();\r\n        promise\r\n            .then(negociacoes => {\r\n                negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\r\n                this._mensagem.texto = 'Negociações da semana obtida com sucesso';\r\n            })\r\n            .catch(erro => this._mensagem.texto = erro);\r\n        */\r\n\r\n        \r\n        \r\n        //função de callback passada na chamada da função obter negociacoes da semana.\r\n        /*service.obterNegociacoesDaSemana((erro, negociacoes) => {\r\n            if(erro){\r\n                this._mensagem.texto = erro;\r\n                return;\r\n            }\r\n\r\n            negociacoes.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\r\n\r\n            //forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\r\n            this._mensagem.texto = 'Negociações importadas com sucesso!';\r\n\r\n        });*/\r\n    }\r\n\r\n\r\n\r\n\r\n\r\n    apaga(){\r\n\r\n        this._service\r\n            .apaga()\r\n            .then(mensagem => {\r\n                this._mensagem.texto = mensagem;\r\n                this._listaNegociacoes.esvazia();\r\n            })\r\n            .catch(error => this._mensagem.texto = erro);\r\n\r\n            /*\r\n        ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(mensagem => {\r\n                this._mensagem.texto = mensagem;\r\n                this._listaNegociacoes.esvazia();\r\n            })\r\n\r\n            */\r\n\r\n        //this._listaNegociacoes.esvazia();\r\n        //this._negociacoesView.update(this._listaNegociacoes); //esse metodo será executado na colasse listaNegociacoes\r\n\r\n        //this._mensagem.texto = 'Negociações apagadas com sucesso!';\r\n        //this._mensagemView.update(this._mensagem);\r\n    }\r\n\r\n\r\n    //criação do metodo para criação da negociação.\r\n    _criaNegociacao() {\r\n        return new Negociacao(\r\n            DateHelper.textoParaData(this._inputData.value),\r\n            parseInt(this._inputQuantidade.value),\r\n            parseFloat(this._inputValor.value));\r\n    }\r\n\r\n    //criação do metodo para limpar os campos do formulário,\r\n    //com o _ Underscore, indica que a função só pode ser chamada dentro desta classe.\r\n    _limpaFormulario() {\r\n\r\n        this._inputData.value = '';\r\n        this._inputQuantidade.value = 1;\r\n        this._inputValor.value = 0.0;\r\n        this._inputData.focus();\r\n    }\r\n\r\n    ordena(coluna) {\r\n        if(this,this._ordemAtual == coluna){\r\n            this._listaNegociacoes.inverteOrdem();\r\n        }else{\r\n            this._listaNegociacoes.ordena((a, b) => a[coluna] - b[coluna]);\r\n        }\r\n        this._ordemAtual = coluna;\r\n    }\r\n    \r\n\r\n\r\n}\r\n  \r\nlet negociacaoController = new NegociacaoController();\r\nexport function currentInstance() {\r\n    return negociacaoController;\r\n}\r\n\r\n"]}