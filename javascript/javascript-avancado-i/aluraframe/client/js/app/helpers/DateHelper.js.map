{"version":3,"sources":["../../app-es6/helpers/DateHelper.js"],"names":["DateHelper","Error","data","getDate","getMonth","getFullYear","texto","test","Date","split","reverse","map","item","indice"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;kCAAaA,U;AAET,sCAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,uCAAV,CAAN;AACH;;AAED;;;;kDAEoBC,I,EAAK;AACrB,+BAAUA,KAAKC,OAAL,EAAV,UAA4BD,KAAKE,QAAL,KAAgB,CAA5C,UAAiDF,KAAKG,WAAL,EAAjD;;AAEA;AACH;;;kDAEoBC,K,EAAM;;AAEvB;;AAEA;;AAEA;AACA,4BAAG,CAAC,sBAAsBC,IAAtB,CAA2BD,KAA3B,CAAJ,EACI,MAAM,IAAIL,KAAJ,CAAU,kCAAV,CAAN;;AAEJ;AACA,kEAAWO,IAAX,mCAAmBF,MAAMG,KAAN,CAAY,GAAZ,EAAiBC,OAAjB,GAA2BC,GAA3B,CAA+B,UAACC,IAAD,EAAOC,MAAP;AAAA,mCAAkBD,OAAOC,SAAS,CAAlC;AAAA,yBAA/B,CAAnB;AAIH","file":"DateHelper.js","sourcesContent":["export class DateHelper{\r\n\r\n    constructor() {\r\n        throw new Error('Esta classe não pode ser instanciada!')\r\n    }\r\n\r\n    // definiu metodos staticos que podem ser acessados diretamente das outras classe, asim não é necessáio instanciar a classe DateHelper toda vez.\r\n\r\n   static dataParaTexto(data){\r\n        return `${data.getDate()}/${data.getMonth()+1}/${data.getFullYear()}`;\r\n        \r\n        //data.getDate() +'/'+ (data.getMonth() +1)  + '/' + data.getFullYear();\r\n    }\r\n\r\n    static textoParaData(texto){\r\n\r\n        //if(!/\\d{4}-\\d{2}-\\d{2}/.test(texto)) throw new Error('Deve estar no formato aaaa-mm-dd');\r\n\r\n        //return new Date(...texto.split('-').map((item, indice) => item - indice % 2));\r\n\r\n        // mudamos a validação para aceitar o novo formato!\r\n        if(!/\\d{2}\\/\\d{2}\\/\\d{4}/.test(texto)) \r\n            throw new Error('Deve estar no formato dd/mm/aaaa');\r\n\r\n        // veja que usamos no split '/' no lugar de '-'. Usamos `reverse` também para ficar ano/mes/dia.      \r\n        return new Date(...texto.split('/').reverse().map((item, indice) => item - indice % 2));\r\n    \r\n\r\n\r\n    }\r\n\r\n}"]}