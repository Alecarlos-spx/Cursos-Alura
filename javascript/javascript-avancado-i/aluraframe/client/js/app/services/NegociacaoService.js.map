{"version":3,"sources":["../../app-es6/services/NegociacaoService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacaoService","_http","Promise","resolve","reject","get","then","negociacoes","map","Date","objeto","data","quantidade","valor","catch","console","log","erro","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","periodos","reduce","dados","periodo","concat","Error","negociacao","getConnection","connection","dao","adiciona","listatodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","JSON","stringify","negociacaoExistente"],"mappings":"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","file":"NegociacaoService.js","sourcesContent":["import {HttpService} from './HttpService';\r\nimport {ConnectionFactory} from './ConnectionFactory';\r\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\r\nimport {Negociacao} from '../models/Negociacao';\r\n\r\n\r\nexport class NegociacaoService{\r\n\r\n    constructor(){\r\n        this._http = new HttpService();\r\n    }\r\n\r\n\r\n    //função callback (cb)\r\n    obterNegociacoesDaSemana() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            this._http\r\n            .get('negociacoes/semana')\r\n            .then(negociacoes => {\r\n                resolve(negociacoes.map(objeto => new Negociacao( new Date(objeto.data), objeto.quantidade, objeto.valor)))   \r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                reject('Não foi possível obter as negociações da semana!');\r\n                \r\n            });\r\n            \r\n           /* let xhr = new XMLHttpRequest();\r\n            xhr.open('GET', '/negociacoes/semana');\r\n            \r\n                    Estados possíveis de um requisição AJAX? Listaremos abaixo os estados:\r\n    \r\n                    0: requisição ainda não iniciada\r\n                    1: conexão com o servidor estabelecida\r\n                    2: requisição recebida\r\n                    3: processando requisição\r\n                    4: requisição está concluída e a resposta está pronta\r\n    \r\n                  //status 200 operação realizada com sucesso\r\n            \r\n            xhr.onreadystatechange = () => {\r\n                if (xhr.readyState == 4) {\r\n                    if(xhr.status == 200){ \r\n                        console.log('Obtendo as negociações do servidor!');\r\n                        \r\n                        //JSON.parse pega o xhr que é um texto e retorna em objetos javascript\r\n                        //map - para cada objeto dentro desta lista é convertida em uma instancia de negociaçao, gerando um novo array\r\n                        //forEach - percorre o array e adiciona cada utem de negociaçao na listaNegociacoes\r\n                        //cb(null, JSON.parse(xhr.responseText)\r\n                        resolve(JSON.parse(xhr.responseText)\r\n                        .map(objeto => new Negociacao( new Date(objeto.data), objeto.quantidade, objeto.valor)));\r\n                        //.forEach(negociacao => this._listaNegociacoes.adiciona(negociacao));\r\n                        //this._mensagem.texto='Negociações importadas com sucesso!';\r\n    \r\n                    } else {\r\n                        console.log(xhr.responseText);\r\n                        reject('Não foi possível obter as negociações da semana!');\r\n                         //this._mensagem.texto='Não foi possível obter as negociações!';\r\n                    }\r\n                }\r\n            }\r\n            xhr.send();\r\n            */\r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaAnterior() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            this._http\r\n            .get('negociacoes/anterior')\r\n            .then(negociacoes => {\r\n                resolve(negociacoes.map(objeto => new Negociacao( new Date(objeto.data), objeto.quantidade, objeto.valor)))   \r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                reject('Não foi possível obter as negociações da semana anterior!');\r\n                \r\n            });\r\n        });\r\n    }\r\n\r\n    obterNegociacoesDaSemanaRetrasada() {\r\n\r\n        return new Promise((resolve, reject) => {\r\n\r\n            this._http\r\n            .get('negociacoes/retrasada')\r\n            .then(negociacoes => {\r\n                resolve(negociacoes.map(objeto => new Negociacao( new Date(objeto.data), objeto.quantidade, objeto.valor)))   \r\n            })\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                reject('Não foi possível obter as negociações da semana retrasada!');\r\n                \r\n            });\r\n        });\r\n    }\r\n \r\n    obterNegociacoes() {\r\n\r\n        return Promise.all([\r\n            this.obterNegociacoesDaSemana(),\r\n            this.obterNegociacoesDaSemanaAnterior(),\r\n            this.obterNegociacoesDaSemanaRetrasada()\r\n        ]).then(periodos => {\r\n\r\n            let negociacoes = periodos\r\n                .reduce((dados, periodo) => dados.concat(periodo), []);\r\n\r\n            return negociacoes;\r\n\r\n        }).catch(erro => {\r\n            throw new Error(erro);\r\n        });\r\n\r\n    } \r\n\r\n    cadastra(negociacao) {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.adiciona(negociacao))\r\n            .then(() => 'Negociacao adicionada com sucesso')\r\n            .catch (erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível adicionar a negociação');\r\n            });\r\n    }\r\n\r\n    lista(){\r\n        \r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.listatodos())\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível obter as negociações');\r\n            })\r\n    }\r\n\r\n    apaga() {\r\n\r\n        return ConnectionFactory\r\n            .getConnection()\r\n            .then(connection => new NegociacaoDao(connection))\r\n            .then(dao => dao.apagaTodos())\r\n            .then(() => 'Negociações apagadas com sucesso')\r\n            .catch(erro => {\r\n                console.log(erro);\r\n                throw new Error('Não foi possível apagar as negociações');\r\n            })\r\n         \r\n\r\n\r\n    }\r\n\r\n    importa(listaAtual) {\r\n\r\n        return this.obterNegociacoes()\r\n        .then(negociacoes => \r\n            negociacoes.filter(negociacao =>\r\n                !listaAtual.some(negociacaoExistente =>\r\n                    JSON.stringify(negociacao) == JSON.stringify(negociacaoExistente)))\r\n        )\r\n        .catch(erro => {\r\n            console.log(erro);\r\n            throw new Error('Não foi possível buscar negociações para importa');\r\n        });\r\n        \r\n\r\n    }\r\n}\r\n\r\n\r\n\r\n\r\n\r\n\r\n"]}