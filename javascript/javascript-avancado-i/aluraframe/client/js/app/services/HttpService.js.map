{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["HttpService","res","ok","Error","statusText","url","fetch","then","_handleErrors","json","dado","headers","method","body","JSON","stringify"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;mCAAaA,W;;;;;;;kDAEKC,G,EAAK;AACf,4BAAG,CAACA,IAAIC,EAAR,EAAY,MAAM,IAAIC,KAAJ,CAAUF,IAAIG,UAAd,CAAN;AACZ,+BAAOH,GAAP;AACH;;;wCAGGI,G,EAAI;AAAA;;AAEJ,+BAAOC,MAAMD,GAAN,EACFE,IADE,CACG;AAAA,mCAAO,MAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,yBADH,EAEFM,IAFE,CAEG;AAAA,mCAAON,IAAIQ,IAAJ,EAAP;AAAA,yBAFH,CAAP;;AAIA;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiCH;;;yCAEIJ,G,EAAKK,I,EAAM;AAAA;;AAEZ,+BAAOJ,MAAMD,GAAN,EAAW;AACdM,qCAAQ,EAAC,gBAAiB,kBAAlB,EADM;AAEdC,oCAAQ,MAFM;AAGdC,kCAAMC,KAAKC,SAAL,CAAeL,IAAf;AAHQ,yBAAX,EAKNH,IALM,CAKD;AAAA,mCAAO,OAAKC,aAAL,CAAmBP,GAAnB,CAAP;AAAA,yBALC,CAAP;;AASA;;;;;;;;;;;;;;;;AAsBH","file":"HttpService.js","sourcesContent":["export class HttpService {\r\n    \r\n    _handleErrors(res) {\r\n        if(!res.ok) throw new Error(res.statusText);\r\n        return res;\r\n    }\r\n    \r\n    \r\n    get(url){\r\n\r\n        return fetch(url)\r\n            .then(res => this._handleErrors(res))\r\n            .then(res => res.json());\r\n\r\n        /*\r\n        return new Promise((resolve, reject) => {\r\n            \r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open('GET', url);\r\n            \r\n                    Estados possíveis de um requisição AJAX? Listaremos abaixo os estados:\r\n    \r\n                    0: requisição ainda não iniciada\r\n                    1: conexão com o servidor estabelecida\r\n                    2: requisição recebida\r\n                    3: processando requisição\r\n                    4: requisição está concluída e a resposta está pronta\r\n    \r\n                    //status 200 operação realizada com sucesso\r\n            \r\n            xhr.onreadystatechange = () => {\r\n                if (xhr.readyState == 4) {\r\n                    if(xhr.status == 200){ \r\n                        console.log('Obtendo as negociações do servidor!');\r\n                        \r\n                        resolve(JSON.parse(xhr.responseText));\r\n    \r\n                    } else {\r\n                        reject(xhr.responseText);\r\n\r\n                    }\r\n                }\r\n            }\r\n            xhr.send();\r\n        \r\n\r\n        });*/\r\n    }\r\n\r\n    post(url, dado) {\r\n\r\n        return fetch(url, {\r\n            headers:{'Content-type' : 'application/json'},\r\n            method: 'post',\r\n            body: JSON.stringify(dado)\r\n        })\r\n        .then(res => this._handleErrors(res));\r\n\r\n\r\n\r\n        /*return new Promise((resolve, reject) => {\r\n\r\n            let xhr = new XMLHttpRequest();\r\n            xhr.open(\"POST\", url, true);\r\n            xhr.setRequestHeader(\"Content-type\", \"application/json\");\r\n            xhr.onreadystatechange = () => {\r\n\r\n                if (xhr.readyState == 4) {\r\n\r\n                    if (xhr.status == 200) {\r\n\r\n                        resolve(JSON.parse(xhr.responseText));\r\n                    } else {\r\n\r\n                        reject(xhr.responseText);\r\n                    }\r\n                }\r\n            };\r\n            xhr.send(JSON.stringify(dado)); // usando JSON.stringifly para converter objeto em uma string no formato JSON.\r\n        });\r\n        */\r\n\r\n    }\r\n\r\n\r\n}"]}