{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AASMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AACT,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,sDAAV,CAAN;AACH;;;;oDAGqB;AAClB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAoB;AACnC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAChCT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AAEF,6BAHD;;AAKAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oCAAG,CAAChB,UAAJ,EAAgB;AACZA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;;AAEA;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR,CAJY,CAI+B;;AAE3C;AACAA,+CAAWC,KAAX,GAAmB,YAAW;AAC1B,8CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,qCAFD;AAGH;AACGE,wCAAQL,UAAR;AACP,6BAdD;;AAgBAO,wCAAYW,OAAZ,GAAsB,aAAK;;AAEvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AAEH,6BALD;AAMH,yBA9BM,CAAP;AA+BH;;;kDAEoBtB,U,EAAW;;AAE5BH,+BAAO0B,OAAP,CAAe,iBAAS;AACpB,gCAAIvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACI1B,WAAW2B,iBAAX,CAA6BD,KAA7B;;AAEJ1B,uCAAW4B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AAEH,yBAND;AAOH;;;sDAEwB;;AAErB,4BAAG7B,UAAH,EAAe;AACXC;AACA;AACAD,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["\r\n//transformando em um modulo (unidade de codigo confinada, para que ninguem tenha acesso ao conteudo)\r\n//declarando uma função anonima - auto invocavél \r\n//foi utilizado um design pattern - module pattern\r\n\r\n//var ConnectionFactory = (function () {\r\n\r\n\r\n\r\nconst stores = ['negociacoes'];\r\nconst version = 4;\r\nconst dbName = 'aluraframe';\r\n\r\nlet connection = null;\r\nlet close = null;\r\n\r\nexport class ConnectionFactory{\r\n    constructor() {\r\n        throw new Error('Não é possível criar instâncias de ConnectionFactory');\r\n    }\r\n\r\n\r\n    static getConnection(){\r\n        return new Promise((resolve, reject) =>{\r\n            let openRequest = window.indexedDB.open(dbName, version);\r\n\r\n            openRequest.onupgradeneeded = e => {\r\n               ConnectionFactory._createStores(e.target.result);     \r\n                \r\n            };\r\n\r\n            openRequest.onsuccess = e => {\r\n\r\n                if(!connection) {\r\n                    connection = e.target.result;\r\n\r\n                    //guardou no metodo close antes da modificação, foi utilizado o bind para manter a associação a connection, não perdendo assim o this delaç\r\n                    close = connection.close.bind(connection); //ou retirando o bind e colocando reflect na função closeconnection\r\n\r\n                    //monkey patch - sobrescreve o metodo conection.close para que não possa fechar a conexão por ele\r\n                    connection.close = function() {\r\n                        throw new Error('Você não pode fechar diretamente a conexão');\r\n                    };\r\n                }\r\n                    resolve(connection);\r\n            };\r\n\r\n            openRequest.onerror = e => {\r\n\r\n                console.log(e.target.error);\r\n                reject(e.target.error.name);\r\n\r\n            };\r\n        });\r\n    };\r\n\r\n    static _createStores(connection){\r\n        \r\n        stores.forEach(store => {\r\n            if (connection.objectStoreNames.contains(store))\r\n                connection.deleteObjectStore(store);\r\n            \r\n            connection.createObjectStore(store, { autoIncrement: true});\r\n            \r\n        });\r\n    }\r\n\r\n    static closeConnection() {\r\n\r\n        if(connection) {\r\n            close();\r\n            //Reflect.apply(close, connection, []); ou retirando o bind e colocando reflect\r\n            connection = null;\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n}\r\n\r\n//})();\r\n\r\n//ConnectionFactory.getConnection(); a conexão deve ser feita desta maneira, apenas chamando o método statico\r\n\r\n//let cf = new ConnectionFactory(); não pode ser feito desta maneira criando uma instancia de ConnectionFactory\r\n\r\n// criando o construtor, determina se houver algum instanciamento da connection, é retornado um erro.\r\n\r\n\r\n\r\n\r\n /*\r\n        a) getConnection vai ser um método estático\r\n        b) getConnection vai retornar uma promisse\r\n        c) não importa o número de vezes que eu chamar o método estátio, a conexão tem que ser a mesma.\r\n        d) o programasor não pode chamar close diretamente. Ele só pode ser fechada através da própria ConnectionFactory.\r\n*/"]}