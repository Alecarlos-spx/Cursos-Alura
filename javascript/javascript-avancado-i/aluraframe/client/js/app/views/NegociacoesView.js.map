{"version":3,"sources":["../../app-es6/views/NegociacoesView.js"],"names":["View","DateHelper","currentInstance","NegociacoesView","elemento","addEventListener","event","target","nodeName","ordena","textContent","toLowerCase","model","_negociacoes","map","n","dataParaTexto","data","quantidade","valor","volume","join","volumeTotal","reduce","total"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAQA,gB,UAAAA,I;;AACAC,sB,sBAAAA,U;;AACAC,2B,oCAAAA,e;;;;;;;;;;;;;;;;;;;;;uCAGKC,e;;;AAET,yCAAYC,QAAZ,EAAqB;AAAA;;AAAA,kJACXA,QADW;;AACA;AACD;;AAEhBA,6BAASC,gBAAT,CAA0B,OAA1B,EAAmC,UAASC,KAAT,EAAgB;AAC/C,4BAAGA,MAAMC,MAAN,CAAaC,QAAb,IAAyB,IAA5B,EACIN,kBAAkBO,MAAlB,CAAyBH,MAAMC,MAAN,CAAaG,WAAb,CAAyBC,WAAzB,EAAzB;AACP,qBAHD;AAJiB;AAQpB;;AAEG;;;;;6CACKC,K,EAAO;;AAEZ,gXAYUA,MAAMC,YAAN,CAAmBC,GAAnB,CAAuB,UAACC,CAAD,EAAO;AAC5B,wGAEcd,WAAWe,aAAX,CAAyBD,EAAEE,IAA3B,CAFd,mDAGcF,EAAEG,UAHhB,+CAIcH,EAAEI,KAJhB,+CAKcJ,EAAEK,MALhB;AASH,yBAVC,EAUCC,IAVD,CAUM,EAVN,CAZV,sJA4BcT,MAAMU,WA5BpB,mCA6BmBV,MAAMC,YAAN,CAAmBU,MAAnB,CAA0B,UAACC,KAAD,EAAQT,CAAR;AAAA,mCAAcS,QAAQT,EAAEK,MAAxB;AAAA,yBAA1B,EAA0D,GAA1D,CA7BnB;AAmCH;;;;cAlDgCpB,I","file":"NegociacoesView.js","sourcesContent":["import {View} from './View';\r\nimport {DateHelper} from '../helpers/DateHelper';\r\nimport {currentInstance} from '../controllers/NegociacaoController';\r\n\r\n\r\nexport class NegociacoesView extends View {\r\n    \r\n    constructor(elemento){  //esse modelo é usado apenas se a clase filhote tem mais algum atributo alem dos iguais a clase pai, senão não é preciso repetir o metodo\r\n        super(elemento); //Como a classe é extendida de View, ela herda os metodos, mas tem que passar o paramentro elemento \r\n                        //para a classe super -> superior pai.\r\n\r\n        elemento.addEventListener('click', function(event) {\r\n            if(event.target.nodeName == 'TH')\r\n                currentInstance().ordena(event.target.textContent.toLowerCase());\r\n        });\r\n    }\r\n\r\n        //template rendering\r\n    template(model) {\r\n\r\n        return `\r\n        <table class=\"table table-hover table-bordered\">\r\n            <thead>\r\n                <tr>\r\n                <th >DATA</th>\r\n                <th >QUANTIDADE</th>\r\n                <th >VALOR</th>\r\n                <th >VOLUME</th>\r\n            </tr>\r\n            </thead>\r\n            \r\n            <tbody>\r\n                ${model._negociacoes.map((n) => {\r\n                    return `\r\n                        <tr>\r\n                            <td>${DateHelper.dataParaTexto(n.data)}    </td>\r\n                            <td>${n.quantidade}</td>\r\n                            <td>${n.valor}</td>\r\n                            <td>${n.volume}</td>\r\n                        </tr>\r\n                    \r\n                    `\r\n                }).join('')}\r\n            </tbody>\r\n            \r\n            <tfoot>\r\n                <td colspan='3'></td>\r\n                <td>\r\n                    ${model.volumeTotal}\r\n                    <!-- ${model._negociacoes.reduce((total, n) => total + n.volume ,0.0)} -->\r\n\r\n                </td>\r\n            </tfoot>\r\n        </table>\r\n        `;\r\n    } // a função map tranforma as negociacoes em um array e percorre através da função => arrow, gerando para cada item o codigo do return, apos isso\r\n    //foi usado o join para transformar o array em string e se unir ao tbody\r\n\r\n    //foi retirada do tfoot para ser colocado um codigo funcional\r\n    /*(function(){\r\n        let total = 0;\r\n        model.negociacoes.forEach(n => total+= n.volume);\r\n        return total;\r\n    })()*/\r\n\r\n    /*\r\n    utilizando o reduce\r\n     model.negociacoes.reduce(function(total, n){\r\n                            return total + n.volume;\r\n                        },0.0)\r\n    */\r\n\r\n \r\n}"]}