07 
Mais fábrica
PRÓXIMA ATIVIDADE

Vamos misturar os conceitos um pouco, afinal isso é um treinamento avançado, certo?

Usamos o padrão Factory para isolar ou encapsular a complexidade da criação do proxy, mas uma fábrica pode fazer mais! Quero dizer que existem outros motivos para usar uma fábrica.

Não sou especialista em bolsa de valores, no entanto sei que, além de ações de uma empresa, existem também opções para comprar. Uma opção dá o direito de comprar ou vender uma 
determinada ação/índice na bolsa de valores. Opções também são negociadas! Ou seja, além de ações podemos negociar, comprar e vender opções.

Para representar isso no nosso modelo, poderíamos criar duas filhas da classe Negociacao: NegociacaoAcao e NegociacaoOpcao.



Agora precisamos decidir no nosso código qual das duas classes devemos instanciar! Não vai ter jeito, e em algum lugar precisará ter um if:

var negociacao = null;

let tipoNegociacao = "opcao"; //isso poderia vir de um formulário web

if(tipoNegociacao == "opcao") {
    negociacao = new NegociacaoOpcao(/*passando params aqui*/);
} else {
    negociacao = new NegociacaoAcao(/*passando params aqui*/);
}
Nesse exemplo, a decisão é relativamente simples, mas se tivesse mais parâmetros para avaliar? E se a gente precisasse desse if em mais de um lugar?

Onde vamos colocar essa decisão?

VER OPINIÃO DO INSTRUTOR
Opinião do instrutor

A resposta é: vamos colocar aquele if dentro de uma factory.

Podemos criar uma classe NegociacaoFactory, que possui um método de criação:

class NegociacaoFactory {

    static create(tipoNegociacao, dados) {
        if(tipoNegociacao == "opcao") {
            return new NegociacaoOpcao(dados.data, dados.quantidade, dados.valor);
        }
        return new NegociacaoAcao(dados.data, dados.quantidade, dados.valor);
    }
}

let n = NegociacaoFactory.create("acao", {'data': new Date(), 'quantidade': 2, 'valor': 34.3});
Repare que a Factory possui mais uma outra responsabilidade, instanciar NegociacaoAcao ou NegociacaoOpcao. A fábrica decide então qual implementação usar. Para quem chama, 
isso pouco importa, pois basta saber que recebemos uma Negociacao.

_____________________________________


08
Fábricas na API JavaScript
PRÓXIMA ATIVIDADE

As fábricas não só fazem parte do nosso código, como também da API do JavaScript. Já existem várias classes que aproveitam esse padrão.

Por exemplo, a classe String possui um método (ou factory method) para transformar vários CharCode em uma string:

let abc = String.fromCharCode(65, 66, 67);  // "ABC"
Outro exemplo é a classe Array, que pode receber uma string ou um iterável, como lista ou mapas, para criar um array:

let d = Array.from("abc");
["a", "b", "c"]
Teste os dois métodos de fábrica agora no seu navegador :)

VER OPINIÃO DO INSTRUTOR
Opinião do instrutor

Ou seja, um factory method nem sempre precisa estar dentro de uma classe dedicada. No exemplo desse exercício, não existe uma classe StringFactory ou ArrayFactory. 
O método pode fazer parte da classe em questão.

Além disso, o factory method não precisa se chamar create ou constroi. Outros nomes são válidos, como from ou getInstance.



__________________________________________________

