Dominando o reduce
PRÓXIMA ATIVIDADE

Você já deve ter ouvido falar em somatórios. O somatório de uma lista de números é a soma de todos os números daquela lista, como por exemplo:

let numeros = [1, 2, 3, 4]; // Somatório = 1 + 2 + 3 + 4 = 10
Um exemplo de função que nos retorne o somatório de um array de números poderia ser assim:

function somatorio(array) {

    var resultado = 0;
    for(let i = 0; i < array.length; i++){
        resultado = array[i] + resultado;
    }

    return resultado;
}
A mesma coisa usando forEach:

function somatorio(array) {
    let resultado = 0;
    array.forEach(item => resultado+= item);
    return resultado;
}
Existe um outro conceito matemático conhecido como produtório, que é análogo ao somatório, só que ao invés de somarmos os números , nós os multiplicamos. Por exemplo:

var numeros = [1, 2, 3, 4]; // Produtório = 1 * 2 * 3 * 4 = 24
Juntando este seu novo conhecimento matemático com o conhecimento de JavaScript adquirido neste capítulo, qual das funções abaixo nos retorna o produtório 
de um array de números corretamente, usando a função reduce?


let numeros = [1, 2, 3, 4];
let resultado = numeros.reduce(function(total, num) {
    return total * num;
}, 1);



___________________________

A função reduce recebe dois parâmetros: uma função e um valor inicial. Na função interna ao reduce, o primeiro parâmetro é o valor da última iteração, que neste caso é o total. O segundo parâmetro é o valor da iteração atual, neste caso o novo número que queremos multiplicar.

O reduce executa sua função interna a cada iteração, então no nosso caso ele multiplica o valor anterior (total) pelo valor da iteração atual (num). Como o produtório é a multiplicação de uma sequência de números, no nosso caso o que está acontecendo é o seguinte:

Supondo o array:

var numeros = [1, 2, 3, 4];
O total se inicia com o valor 1*, *definido pelo segundo parâmetro da função reduce.

É feita a primeira iteração, pegando o primeiro valor do array (1) :

return total * num; // Leia-se: return 1 * 1 e coloque este valor em total.
Na segunda iteração, com o segundo valor do array (2):

return total * num; // Leia-se return 1 * 2 e coloque este valor em total, que agora vale 2;
Na terceira iteração, com o segundo valor do array (3):

return total * num; // Leia-se return 2 * 3 e coloque este valor em total, que agora vale 6;
Na segunda iteração, com o segundo valor do array (4):

return total * num; // Leia-se return 6 * 4 e coloque este valor em total, que agora vale 24;
E no final ele devolve para nós o valor 24 , que é o valor esperado do produtório!


______________________________




Um pouco mais sobre o reduce
PRÓXIMA ATIVIDADE

Vejamos um exemplo com reduce que soma todos os números de um array:

let numeros = [1,2,3,4];

let resultado = numeros.reduce((anterior, atual) => anterior + atual);
alert(resultado);
O resultado é 10. Contudo, muitas vezes queremos começar a operação considerando um valor de inicialização. Por exemplo, queremos realizar a mesma operação, só que dessa vez, queremos começar com o valor 5.

let resultado2 = numeros.reduce((anterior, atual) => anterior + atual, 5);
alert(resultado2);
Desta vez, o resultado final é 15!

Sendo assim, nada nos impede de fazer o primeiro reduce passando 0:

let numeros = [1,2,3,4];

let resultado = numeros.reduce((anterior, atual) => anterior + atual, 0);
alert(resultado);
O resultado será 10 também. Mas vale a pena passar o segundo parâmetro da função reduce já que neste caso quando o array for vazio, será lançada a exceção Reduce of empty array with no initial value".



___________________________


Reduce com arrow function
PRÓXIMA ATIVIDADE

Demostre seu conhecimento de ES6 reescrevendo o exemplo da função reduce, do exercício anterior, utilizando uma arrow function no lugar da função tradicional.

Aqui está ela, para você não precisar voltar:

numeros.reduce(function(total,num) {
    return total * num;
}, 1);
VER OPINIÃO DO INSTRUTOR
Opinião do instrutor

Refatorando o reduce com uma arrow function, ele deve ficar assim:

numeros.reduce((total, num) => total * num , 1);
Mais uma vez podemos ver um exemplo aonde uma arrow function deixou o código mais elegante. Continue praticando seu uso que logo logo você ficará especialista nessa feature do ES6!