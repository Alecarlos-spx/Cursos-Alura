desinstalando babel-cli
  
  npm uninstall babel-cli --save-dev
  
  
  desinstalando p systemjs
  
  npm uninstall systemjs --save
  
  
  _____________________________________________________________________________
  
  instalando o webpack e o babel-core
  
  npm install webpack@3.1.0 babel-core@6.25.0 --save-dev
  
 _____________________________________________________________________________ 
  criar o arquivo na raiz da pasta do app webpack.config.js
  
  const path = require('path');

module.exports = {
    entry: './app-src/app.js',  //primeiro modulo a ser carregado da aplicação
    output: {
        filename: 'bundle.js',
        path: path.resolve(__dirname, 'dist') //__dirname retorna a pasta atual onde a aplicação está 
    }
},
  
  
  _____________________________________________________________________________
  
  no arquivo package.json acrescentar a chamada do webpack
  
    abaixo desta linha "test": "echo \"Error: no test specified\" && exit 1",
    "build-dev": "webpack --config webpack.config.js"
	
	
  instalando o babel-loader para fazer a interligação entre o webpack e o babel-core
  
  npm install babel-loader@7.1.0 --save-dev
  
  
  _____________________________________________________________________________
  
  linhas acrescentadas ao webpack para o carregamento do babel-loader
  
  const path = require('path');

module.exports = {
    entry: './app-src/app.js',  //primeiro modulo a ser carregado da aplicação
    output: {
        filename: 'bundle.js',
        path: path.resolve(__dirname, 'dist') //__dirname retorna a pasta atual onde a aplicação está 
    },
    module: { // os modulos de loader são executados antes do webpack para carregar dependencias para serem usadas antes da criação do bundle
        rules: [
            {
                test: /\.js$/, //a expressão regular determina a extensão de arquivos que serão procuradas
                exclude: /node_module/, //pasta a ser excluida da busca
                use: {
                    loader: 'babel-loader' //o processamento será feito com o babel-loader, carregando o babelrc e aplicando o babel-core nos arquivos do projeto
                }
            }
        ]
    }
}


remover do babelrc a linha
"transform-es2015-modules-systemjs", 

e tambem do package.json a desinstalar o babel-plugin-transform-es2015-modules-systemjs

npm uninstall babel-plugin-transform-es2015-modules-systemjs --save-dev

_____________________________________________________________________________

gerar o bundle

npm run buld-dev

_____________________________________________________________________________

minificar o codigo do bundle

instalar o plugin babili

npm install babili-webpack=plugin@0.1.1 --save-dev

para funcionar no windows tem que ser instalado um modulo crossenv

npm install cross-env@5.0.1 --save-dev

_____________________________________________________________________________

apos a instalação no package.json inserir a linha abaixo de build-dev

"build-prod": "cross-env NODE_ENV=production webpack --config webpack.config.js"

npm run build-dev

npm run build-prod

_____________________________________________________________________________


instalando webpack-dev-server

npm install webpack-dev-server@2.5.1 --save-dev


adicionar no package.json
"start": "webpack-dev-server"

_____________________________________________________________________________

instalando bootstrap

npm install bootstrap@3.3.7 --save

no arquivo app.js 

import 'bootstrap/dist/css/bootstrap.css';
import 'bootstrap/dist/css/bootstrap-theme.css';

instalar o loader para os arquivos css do bootstrap

npm install css-loader@0.28.4 style-loader@0.18.2 --save-dev

acrescentar regra no webpack-config para carregar os plugins css e style loader

			{	
                test: /\.css$/,
                loader: 'style-loader!css-loader'
            }

instalação de loaders de fonts do bootstrap

npm install url-loader@0.5.9 file-loader@0.11.2 --save-dev

adicionar regras no webpack-config


            { 
                test: /\.(woff|woff2)(\?v=\d+\.\d+\.\d+)?$/, 
                loader: 'url-loader?limit=10000&mimetype=application/font-woff' 
            },
            { 
                test: /\.ttf(\?v=\d+\.\d+\.\d+)?$/, 
                loader: 'url-loader?limit=10000&mimetype=application/octet-stream'
            },
            { 
                test: /\.eot(\?v=\d+\.\d+\.\d+)?$/, 
                loader: 'file-loader' 
            },
            { 
                test: /\.svg(\?v=\d+\.\d+\.\d+)?$/, 
                loader: 'url-loader?limit=10000&mimetype=image/svg+xml' 
            }          
			
no index.html adicionar

<link rel="stylesheet" href="dist/styles.css">

instalar o plugin para separar o stilo css do bundle 

npm install extract-text-webpack-plugin@3.0.0 --save-dev			



const extractTextPlugin = require('extract-text-webpack-plugin');
plugins.push(new extractTextPlugin('styles.css'));


substituir no webpack-config

está linha  --->  loader: 'style-loader!css-loader'

por está linha -->

				use: extractTextPlugin.extract({
                    fallback: 'style-loader',
                    use: 'css-loader'
                })
                
npm run build-dev

na pasta dist será criado o styles.css com todo os css, separando assim do bundle.js e não tendo falha de carregamento do css



minimizar o styles.css para a produção, é necessário instalar dois plugins


npm install optimize-css-assets-webpack-plugin@2.0.0 --save-dev
npm install cssnano@3.10.0 --save-dev

webpack-config

const optimazeCSSAssetsPlugin = require('optimize-css-assets-webpack-plugin')

let plugins = [];

plugins.push(new extractTextPlugin('styles.css'));

if(process.env.NODE_ENV == 'production'){
    plugins.push(new babiliPlugin());

    plugins.push(new optimazeCSSAssetsPlugin({
        cssProcessor: require('cssnano'),
        cssProcessorOptions: {
            discardComments: {
                removeAll: true
            }
        },
        canPrint: true
    }));
}



_____________________________________________________________________________










